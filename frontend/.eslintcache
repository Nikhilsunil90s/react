[{"/app/src/index.jsx":"1","/app/src/config/theme.js":"2","/app/src/App.jsx":"3","/app/src/views/Course.tsx":"4","/app/src/views/admin-panel/Appbar.jsx":"5","/app/src/components/course/Course.tsx":"6","/app/src/views/admin-panel/Courses.tsx":"7","/app/src/views/admin-panel/Dashboard.jsx":"8","/app/src/components/shared/ShowLesson.tsx":"9","/app/src/components/admin-panel/courses/Courses.tsx":"10","/app/src/components/admin-panel/dashboard/Dashboard.jsx":"11","/app/src/components/admin-panel/courses/CourseForm.tsx":"12","/app/src/components/course/CourseCard.tsx":"13","/app/src/components/course/WelcomeMessage.tsx":"14","/app/src/components/admin-panel/dashboard/Widget.jsx":"15","/app/src/components/admin-panel/dashboard/SparkLine.jsx":"16","/app/src/components/shared/nav/AppBar.tsx":"17","/app/src/components/shared/nav/SubHeader.tsx":"18","/app/src/components/shared/MediaPreview.jsx":"19"},{"size":380,"mtime":1607730896353,"results":"20","hashOfConfig":"21"},{"size":265,"mtime":1607730896353,"results":"22","hashOfConfig":"21"},{"size":786,"mtime":1607730896349,"results":"23","hashOfConfig":"21"},{"size":43,"mtime":1607730896354,"results":"24","hashOfConfig":"21"},{"size":7032,"mtime":1607730896354,"results":"25","hashOfConfig":"21"},{"size":4801,"mtime":1607730896351,"results":"26","hashOfConfig":"21"},{"size":60,"mtime":1607730896354,"results":"27","hashOfConfig":"21"},{"size":64,"mtime":1607730896354,"results":"28","hashOfConfig":"21"},{"size":3391,"mtime":1607730896352,"results":"29","hashOfConfig":"21"},{"size":1811,"mtime":1607730896350,"results":"30","hashOfConfig":"21"},{"size":3614,"mtime":1607730896351,"results":"31","hashOfConfig":"21"},{"size":6869,"mtime":1607730896350,"results":"32","hashOfConfig":"21"},{"size":3734,"mtime":1607730896352,"results":"33","hashOfConfig":"21"},{"size":3929,"mtime":1607730896352,"results":"34","hashOfConfig":"21"},{"size":1458,"mtime":1607730896351,"results":"35","hashOfConfig":"21"},{"size":1325,"mtime":1607730896351,"results":"36","hashOfConfig":"21"},{"size":2550,"mtime":1607730896353,"results":"37","hashOfConfig":"21"},{"size":1634,"mtime":1607730896353,"results":"38","hashOfConfig":"21"},{"size":4727,"mtime":1607730896352,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"mzom31",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"49"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"49"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"49"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"49"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"49"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"42"},"/app/src/index.jsx",[],["86","87"],"/app/src/config/theme.js",[],"/app/src/App.jsx",[],"/app/src/views/Course.tsx",[],["88","89"],"/app/src/views/admin-panel/Appbar.jsx",[],"/app/src/components/course/Course.tsx",["90","91"],"import React, { useState } from 'react'\r\nimport Container from '@material-ui/core/Container'\r\nimport Box from '@material-ui/core/Box'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport AppBar from '../shared/nav/AppBar'\r\nimport SubHeader from '../shared/nav/SubHeader'\r\nimport Welcome from './WelcomeMessage'\r\nimport CourseCard from './CourseCard'\r\nimport ShowLesson from '../shared/ShowLesson'\r\n\r\ninterface lessonType {\r\n    id: number,\r\n    thumbnail:string,\r\n    video:string,\r\n    duration:string,\r\n    title:string,\r\n    description:string\r\n}\r\n\r\n\r\nexport const Course: React.FC = () => {\r\n\r\n    const [lessons, setLessons] = useState<Array<lessonType>>([\r\n        {\r\n            id: 1,\r\n            thumbnail: 'ai-1.jpeg',\r\n            video: 'https://www.youtube.com/watch?v=gR8QvFmNuLE&list',\r\n            duration: '01:53',\r\n            title: 'What is AI?',\r\n            description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.'\r\n        },\r\n        {\r\n            id: 2,\r\n            thumbnail: 'ai-2.jpeg',\r\n            video: 'https://www.youtube.com/watch?v=WbzNRTTrX0g&list',\r\n            duration: '1:49:30',\r\n            title: 'AI and Society',\r\n            description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.'\r\n        },\r\n        {\r\n            id: 3,\r\n            thumbnail: 'ai-3.jpeg',\r\n            video: 'https://www.youtube.com/watch?v=qK46ET1xk2A&list',\r\n            duration: '1:47:44',\r\n            title: 'AI Concepts, Terminology, and Application Areas',\r\n            description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.'\r\n        },\r\n        {\r\n            id: 4,\r\n            thumbnail: 'ai-4.jpeg',\r\n            video: 'https://www.youtube.com/watch?v=D8RRq3TbtHU&list',\r\n            duration: '1:49:45',\r\n            title: 'AI: Issues, Concerns and Ethical Considerations',\r\n            description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.'\r\n        },\r\n        {\r\n            id: 5,\r\n            thumbnail: 'ai-5.jpeg',\r\n            video: 'https://www.youtube.com/watch?v=J1QD9hLDEDY&list',\r\n            duration: '1:45:12',\r\n            title: 'Neural Networks',\r\n            description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.'\r\n        },\r\n        {\r\n            id: 6,\r\n            thumbnail: 'ai-6.jpeg',\r\n            video: 'https://www.youtube.com/watch?v=qK46ET1xk2A&list',\r\n            duration: '50:20',\r\n            title: 'The Future with AI, and AI in Action',\r\n            description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.'\r\n        }\r\n    ])\r\n\r\n    const [showLessonModal, setShowLessonModal]= useState<boolean>(false)\r\n    const [lessonDetails, setLessonDetails]= useState<lessonType>({id: 0, thumbnail: '', video:'', duration: '', title: '', description: ''})\r\n    \r\n\r\n    const showLesson= (lesson:lessonType) => {\r\n        setLessonDetails(lesson)\r\n        handleShowLessonModal(true)\r\n    }\r\n\r\n    const handleShowLessonModal= (e:boolean) => {\r\n        setShowLessonModal(e)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <AppBar/>\r\n            <SubHeader/>\r\n            <Welcome/>\r\n            <Container maxWidth=\"md\" style={{paddingTop: 20, paddingBottom: 100}}>\r\n                <Box>\r\n                    {\r\n                        lessons ? lessons.map( (lesson, index) => (\r\n                            <Box mt={10}><CourseCard lesson={lesson} count={++index} showLessonModal={showLesson} /></Box>\r\n                        )) : null\r\n                    }\r\n                </Box>\r\n            </Container>\r\n\r\n            <ShowLesson showLessonModal={showLessonModal} lesson={lessonDetails} handleShowLessonModal={handleShowLessonModal} />\r\n\r\n        </>\r\n    )\r\n}\r\n","/app/src/views/admin-panel/Courses.tsx",[],"/app/src/views/admin-panel/Dashboard.jsx",[],"/app/src/components/shared/ShowLesson.tsx",["92","93","94","95","96","97","98","99"],"import React, { useState, useEffect} from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport Container from '@material-ui/core/Container';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { TransitionProps } from '@material-ui/core/transitions';\r\nimport ReactPlayer from 'react-player/lazy'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    wrapper: {\r\n      background: theme.palette.primary.dark,\r\n      height: '100%',\r\n      width: '100%',\r\n      display: 'flex',\r\n      justifyContent: 'center', \r\n      alignItems: 'center',\r\n    },\r\n    content: {\r\n      display: 'flex',\r\n      justifyContent: 'center', \r\n      alignItems: 'center',\r\n      height: '100%',\r\n      width: '100%',\r\n      maxWidth: 1920,\r\n      overflow: 'hidden',\r\n    },\r\n    appBar: {\r\n      position: 'relative',\r\n      background: theme.palette.primary.light,\r\n    },\r\n    title: {\r\n      marginLeft: theme.spacing(2),\r\n      flex: 1,\r\n    },\r\n  }),\r\n);\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n  props: TransitionProps & { children?: React.ReactElement },\r\n  ref: React.Ref<unknown>,\r\n) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\ninterface lessonType {\r\n  id: number,\r\n  thumbnail:string,\r\n  video:string,\r\n  duration:string,\r\n  title:string,\r\n  description:string\r\n}\r\n\r\ninterface showLessonProps{\r\n  showLessonModal: boolean,\r\n  lesson:lessonType\r\n  handleShowLessonModal(e:boolean):void,\r\n\r\n}\r\n\r\nconst FullScreenDialog: React.FC<showLessonProps>= ({showLessonModal, lesson, handleShowLessonModal}) => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    handleShowLessonModal(false)\r\n  };\r\n\r\n  useEffect( () => {\r\n    setOpen(showLessonModal)\r\n  }, [showLessonModal])\r\n\r\n  return (\r\n    <div>\r\n      <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\r\n        <AppBar className={classes.appBar}>\r\n          <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\r\n              <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              {lesson.title}\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Box className={classes.wrapper}>\r\n          <Box className={classes.content}>\r\n              <ReactPlayer \r\n                url={lesson.video} \r\n                width=\"95%\"\r\n                height=\"95%\"\r\n                controls={true}\r\n              />\r\n          </Box>\r\n        </Box>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FullScreenDialog","/app/src/components/admin-panel/courses/Courses.tsx",["100","101","102","103","104","105","106","107"],"import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery'\r\nimport Box from '@material-ui/core/Box'\r\nimport Container from '@material-ui/core/Container'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\r\nimport Image from 'material-ui-image'\r\nimport TextTruncate from 'react-text-truncate'\r\nimport CourseForm from './CourseForm'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    \r\n}))\r\n\r\ninterface CourseType{\r\n    _id?: number,\r\n    title?: string,\r\n    description?: string\r\n    thumbnail?: string\r\n    trailer?: string,\r\n    cover: string,\r\n}\r\n\r\nexport const Courses= () => {\r\n\r\n    const [showCourseForm, setShowCourseForm]= useState<boolean>(false)\r\n\r\n    const [course, setCourse]= useState<CourseType | any>(null)\r\n\r\n    const handleShowCourseModal= (e:boolean) => {\r\n        setShowCourseForm(e)\r\n    }\r\n    return (\r\n        <Container maxWidth=\"xl\">\r\n\r\n            <Box display=\"flex\" justifyContent=\"flex-end\" mt={2}>\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    startIcon={<AddCircleIcon />}\r\n                    onClick={ () => handleShowCourseModal(true)}\r\n                >\r\n                    Add Course\r\n                </Button>\r\n            </Box>\r\n\r\n            <Box mt={5}>\r\n                <Typography variant=\"h4\" color=\"primary\">Courses</Typography>\r\n            </Box>\r\n\r\n            <CourseForm show={showCourseForm} handleShowCourseModal={handleShowCourseModal} course={course} />\r\n\r\n        </Container>\r\n    )\r\n}\r\n","/app/src/components/admin-panel/dashboard/Dashboard.jsx",[],"/app/src/components/admin-panel/courses/CourseForm.tsx",["108","109","110","111","112","113"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport MediaPreview from '../../shared/MediaPreview'\r\n\r\nimport Badge from '@material-ui/core/Badge';\r\nimport CancelTwoToneIcon from '@material-ui/icons/CancelTwoTone';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  dialog: {\r\n      background: theme.palette.primary.light,\r\n  },\r\n  formControl: {\r\n    marginTop: 10,\r\n    minWidth: 120,\r\n  },\r\n  textField: {\r\n      fontSize: 14, \r\n      color: '#7f7f7f'\r\n  }\r\n}));\r\n\r\ninterface CourseType{\r\n  _id?: number,\r\n  title?: string,\r\n  description?: string\r\n  thumbnail?: string\r\n  trailer?: string,\r\n  cover: string\r\n}\r\n\r\ninterface courseFormProps{\r\n  show: boolean\r\n  handleShowCourseModal(e:boolean): void,\r\n  course:  CourseType | any\r\n}\r\n\r\nconst CourseForm: React.FC<courseFormProps> = ({show, handleShowCourseModal, course}) => {\r\n\r\n  const classes = useStyles();\r\n\r\n  const [open, setOpen] = useState<boolean>(false)\r\n  const [id, setId]= useState<number>(-1)\r\n  const [title, setTitle]= useState<string>('')\r\n  const [description, setDescription]= useState<string>('')\r\n  const [thumbnail, setThumbnail]= useState<string>('')\r\n  const [trailer, setTrailer]= useState<string>('')\r\n  const [cover, setCover]= useState<string>('')\r\n\r\n  const [currThumbnail, setCurrThumbnail]= useState<string>('')\r\n  const [currTrailer, setCurrTrailer]= useState<string>('')\r\n  const [currCover, setCurrCover]= useState<string>('')\r\n\r\n  const handleClose = () => {\r\n    setId(-1)\r\n    setTitle('')\r\n    setDescription('')\r\n    setThumbnail('')\r\n    setTrailer('')\r\n    setCover('')\r\n    setCurrThumbnail('')\r\n    setCurrTrailer('')\r\n    setCurrCover('')\r\n    handleShowCourseModal(false)\r\n    setOpen(false)\r\n  }\r\n\r\n  const handleThumbnailUpload= (e:any) => {\r\n    setThumbnail(e)\r\n  }\r\n\r\n  const handleCoverUpload= (e:any) => {\r\n    setCover(e)\r\n  }\r\n\r\n  const removeCurrThumbnail= () => {\r\n    setCurrThumbnail('')\r\n  }\r\n\r\n  const removeCurrTrailer= () => {\r\n    setCurrTrailer('')\r\n  }\r\n\r\n  const removeCurrCover= () => {\r\n    setCurrCover('')\r\n  }\r\n\r\n  useEffect( () => {\r\n    setOpen(show)\r\n  }, [show])\r\n\r\n  useEffect( () => {\r\n    if(course !== null){\r\n      setId(course._id)\r\n      setTitle(course.title)\r\n      setDescription(course.description)\r\n      setCurrThumbnail(course.thumbnail)\r\n      setCurrTrailer(course.trailer)\r\n      setCurrCover(course.cover)\r\n    }\r\n  }, [course])\r\n\r\n  const isEmptyOrSpaces= (str:string) => {\r\n    return str === null || str.match(/^ *$/) !== null\r\n  }\r\n\r\n  const isDisabled= () => {\r\n\r\n      if(title && !isEmptyOrSpaces(title) && description && !isEmptyOrSpaces(description) && (thumbnail || currThumbnail) &&\r\n      (trailer || currTrailer) && (cover || currCover))\r\n          return false\r\n      \r\n          return true\r\n  }\r\n\r\n  const handleSubmit= () => {\r\n    \r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\" style={{background: '#191919', color: '#1E88F7'}} >Add Course</DialogTitle>\r\n        <DialogContent className={classes.dialog}>\r\n          <Box>\r\n            <TextField\r\n              autoFocus\r\n              defaultValue={title}\r\n              margin=\"dense\"\r\n              id=\"title\"\r\n              label=\"Tilte\"\r\n              type=\"text\"\r\n              fullWidth\r\n              onChange={ (e) => setTitle(e.target.value) }\r\n              InputProps={{\r\n                  className: classes.textField,\r\n              }}\r\n            />\r\n            <TextField\r\n              defaultValue={description}\r\n              margin=\"dense\"\r\n              id=\"description\"\r\n              label=\"description\"\r\n              type=\"text\"\r\n              fullWidth\r\n              multiline\r\n              rows={5}\r\n              onChange={ (e) => setDescription(e.target.value) }\r\n              InputProps={{\r\n                  className: classes.textField,\r\n              }}\r\n              style={{marginTop: 20}}\r\n            />\r\n            <Box>\r\n              {\r\n                currThumbnail ? \r\n                (\r\n                  <Badge style={{marginRight: 20}} badgeContent={<CancelTwoToneIcon color=\"primary\"  style={{cursor: 'pointer'}} onClick={ () => removeCurrThumbnail() } />}>\r\n                      <Box style={{width: 80, height: 80}}><img style={{width: '100%', height: '100%', objectFit: 'cover'}} src={`/media/images/${currThumbnail}`}/></Box>\r\n                  </Badge> \r\n                ) : \r\n                (\r\n                  <MediaPreview handleImageUpload={handleThumbnailUpload} caption=\"Trailer Thumbnail\" />\r\n                )\r\n              }\r\n              {\r\n                currTrailer ? \r\n                (\r\n                  <Badge style={{marginRight: 20}} badgeContent={<CancelTwoToneIcon color=\"primary\"  style={{cursor: 'pointer'}} onClick={ () => removeCurrTrailer() } />}>\r\n                      <Box style={{width: 80, height: 80}}><img style={{width: '100%', height: '100%', objectFit: 'cover'}} src={`/media/images/${currTrailer}`}/></Box>\r\n                  </Badge> \r\n                ) : \r\n                (\r\n                  <MediaPreview handleImageUpload={handleThumbnailUpload} caption=\"Course Trailer\" />\r\n                )\r\n              }\r\n              {\r\n                currCover ? \r\n                (\r\n                  <Badge style={{marginRight: 20}} badgeContent={<CancelTwoToneIcon color=\"primary\"  style={{cursor: 'pointer'}} onClick={ () => removeCurrCover() } />}>\r\n                      <Box style={{width: 80, height: 80}}><img style={{width: '100%', height: '100%', objectFit: 'cover'}} src={`/media/images/${currCover}`}/></Box>\r\n                  </Badge> \r\n                ) : \r\n                (\r\n                  <MediaPreview handleImageUpload={handleCoverUpload} caption=\"Cover Photo\" />\r\n                )\r\n              }\r\n            </Box>\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions className={classes.dialog} style={{paddingTop: 10}} >\r\n          <Button onClick={handleClose} color=\"primary\" variant=\"outlined\" >\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleSubmit} color=\"primary\" disabled={isDisabled()} variant=\"outlined\" >\r\n            Submit\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CourseForm\r\n","/app/src/components/course/CourseCard.tsx",[],"/app/src/components/course/WelcomeMessage.tsx",[],"/app/src/components/admin-panel/dashboard/Widget.jsx",[],"/app/src/components/admin-panel/dashboard/SparkLine.jsx",[],"/app/src/components/shared/nav/AppBar.tsx",[],"/app/src/components/shared/nav/SubHeader.tsx",["114"],"import React from 'react';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\nimport Link from '@material-ui/core/Link';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\n\r\nfunction handleClick(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) {\r\n  event.preventDefault();\r\n  console.info('You clicked a breadcrumb.');\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      height: 65,\r\n      background: theme.palette.primary.light,\r\n      color: '#fff',\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      textAlign: 'center',\r\n      borderBottom: '1px solid #212121',\r\n      [theme.breakpoints.down('sm')]: {\r\n        padding: '0px 10px'\r\n      },\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function SubHeader() {\r\n\r\n  const classes = useStyles()\r\n  const matches = useMediaQuery('(max-width:960px)')\r\n\r\n  return (\r\n    <Breadcrumbs aria-label=\"breadcrumb\" className={classes.root}>\r\n      <Link color=\"inherit\" href=\"/\" onClick={handleClick}>\r\n        Logo\r\n      </Link>\r\n      <Link color=\"inherit\" href=\"/getting-started/installation/\" onClick={handleClick}>\r\n        All Courses\r\n      </Link>\r\n      <Link color=\"inherit\" href=\"/getting-started/installation/\" onClick={handleClick}>\r\n        Computer Science\r\n      </Link>\r\n      <Link\r\n        color=\"primary\"\r\n        href=\"/components/breadcrumbs/\"\r\n        onClick={handleClick}\r\n        aria-current=\"page\"\r\n      >\r\n        Artificial Intelligence\r\n      </Link>\r\n    </Breadcrumbs>\r\n  );\r\n}\r\n","/app/src/components/shared/MediaPreview.jsx",["115","116","117","118","119"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport { Box, Button } from '@material-ui/core';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport CancelTwoToneIcon from '@material-ui/icons/CancelTwoTone';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nexport default function MediaPreview(props) {\r\n\r\n    const [images, setImages]= useState(undefined)\r\n    const [imagesPreview, setImagesPreview]= useState(undefined)\r\n    const [imgCount, setImgCount]= useState(0)\r\n    const [maxImgNum, setMaxImgNum]= useState(1)\r\n    const inputFileRef= useRef()\r\n    \r\n    // image preview  \r\n    \r\n      const handleImageUpload= e => {\r\n    \r\n        if (!e.target.files || e.target.files.length === 0) \r\n        {\r\n          setImages(undefined)\r\n          return\r\n        }\r\n    \r\n        if(images !== undefined)\r\n          setImages(prev => ( [...prev,  e.target.files[0]] ) )\r\n        else\r\n          setImages([e.target.files[0]])\r\n    \r\n      }\r\n    \r\n      useEffect(() => {\r\n\r\n        //save uploaded images in parent component\r\n        props.handleImageUpload(images) \r\n    \r\n        if (!images) {\r\n          setImagesPreview(undefined)\r\n          return\r\n        }\r\n    \r\n        if( imgCount !== 0 && images.length < imgCount ){\r\n    \r\n          if(images.length === 0){\r\n            setImages(undefined)\r\n            setImagesPreview(undefined)\r\n            //inputFileRef.current.value= null\r\n          }\r\n          setImgCount(prev => prev-1)\r\n          return\r\n        }\r\n    \r\n        const objectUrl = URL.createObjectURL(images[imgCount])\r\n    \r\n        if(imagesPreview !== undefined)\r\n        {\r\n            if(images[imgCount]['type'].split('/')[0] === 'image')\r\n                setImagesPreview([...imagesPreview, {src: objectUrl, type: 'image'} ])\r\n            else\r\n                setImagesPreview([...imagesPreview, {src: objectUrl, type: 'video'}])\r\n        }\r\n        else\r\n        {\r\n            if(images[imgCount]['type'].split('/')[0] === 'image')  \r\n                setImagesPreview([{src: objectUrl, type: 'image'}])\r\n            else\r\n                setImagesPreview([{src: objectUrl, type: 'video'}])\r\n        }\r\n    \r\n        setImgCount(prev => prev+1)\r\n    \r\n      }, [images])\r\n    \r\n      useEffect(() => {\r\n    \r\n        return () => (\r\n          imagesPreview !== undefined ? ( imagesPreview.map( preview => {\r\n            URL.revokeObjectURL(preview)\r\n          }) ) : ''\r\n        )\r\n      }, [])\r\n    \r\n      const removePreviewImg= (index) => {\r\n    \r\n        const temp1 = [...imagesPreview];\r\n        const temp2 = [...images];\r\n    \r\n        temp1.splice(index, 1);\r\n        temp2.splice(index, 1);\r\n    \r\n        setImagesPreview(temp1)\r\n        setImages(temp2)\r\n      }\r\n\r\n    return (\r\n        <Box my={2} style={{zIndex: 1}}>\r\n            <Box mb={3}><Typography color=\"primary\" variant=\"body2\" style={{fontWeight: 600}}>{props.caption}: </Typography> </Box>\r\n            \r\n            <Box style={{ display: 'flex', flexWrap: 'wrap', rowGap: 20}}>\r\n\r\n                { \r\n                imagesPreview ? \r\n                    imagesPreview.map( (image, index) => (\r\n                    <Badge style={{marginRight: 20}} badgeContent={<CancelTwoToneIcon color=\"primary\" style={{cursor: 'pointer'}} onClick={ () => removePreviewImg(index) } />}>\r\n                        <Box style={{width: 80, height: 80}}>\r\n                            {\r\n                                image.type === 'image' ? <img style={{width: '100%', height: '100%', objectFit: 'cover'}} src={image.src}/> \r\n                                : <video style={{width: '100%', height: '100%', objectFit: 'cover'}} src={image.src}/>\r\n                            }\r\n                        </Box>\r\n                    </Badge> \r\n                    ))\r\n                : null\r\n                }\r\n\r\n                {\r\n                imgCount < maxImgNum ? (\r\n                    <Box style={{width: 80, height: 80, background: '#1E1E2E'}}>\r\n                    <Button component=\"label\" style={{display: 'flex', justifyContent: 'center', alignItems: 'center', width: '100%', height: '100%'}}>\r\n                        <AddCircleOutlineIcon style={{width: 50, height: 50, cursor: 'pointer',}} color=\"primary\"/>\r\n                        <input\r\n                        type=\"file\"\r\n                        style={{ display: \"none\" }}\r\n                        onChange={handleImageUpload}\r\n                        ref={inputFileRef}\r\n                        />\r\n                    </Button>\r\n                    </Box>\r\n                ) : null\r\n                }\r\n\r\n            </Box>\r\n\r\n        </Box>\r\n    )\r\n}",{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":4,"column":8,"nodeType":"126","messageId":"127","endLine":4,"endColumn":18},{"ruleId":"124","severity":1,"message":"128","line":23,"column":21,"nodeType":"126","messageId":"127","endLine":23,"endColumn":31},{"ruleId":"124","severity":1,"message":"129","line":1,"column":17,"nodeType":"126","messageId":"127","endLine":1,"endColumn":25},{"ruleId":"124","severity":1,"message":"130","line":3,"column":8,"nodeType":"126","messageId":"127","endLine":3,"endColumn":14},{"ruleId":"124","severity":1,"message":"131","line":5,"column":8,"nodeType":"126","messageId":"127","endLine":5,"endColumn":17},{"ruleId":"124","severity":1,"message":"132","line":7,"column":8,"nodeType":"126","messageId":"127","endLine":7,"endColumn":20},{"ruleId":"124","severity":1,"message":"133","line":8,"column":8,"nodeType":"126","messageId":"127","endLine":8,"endColumn":16},{"ruleId":"124","severity":1,"message":"134","line":9,"column":8,"nodeType":"126","messageId":"127","endLine":9,"endColumn":12},{"ruleId":"124","severity":1,"message":"135","line":10,"column":8,"nodeType":"126","messageId":"127","endLine":10,"endColumn":15},{"ruleId":"124","severity":1,"message":"136","line":77,"column":9,"nodeType":"126","messageId":"127","endLine":77,"endColumn":24},{"ruleId":"124","severity":1,"message":"137","line":1,"column":27,"nodeType":"126","messageId":"127","endLine":1,"endColumn":36},{"ruleId":"124","severity":1,"message":"138","line":2,"column":8,"nodeType":"126","messageId":"127","endLine":2,"endColumn":13},{"ruleId":"124","severity":1,"message":"139","line":4,"column":8,"nodeType":"126","messageId":"127","endLine":4,"endColumn":21},{"ruleId":"124","severity":1,"message":"140","line":7,"column":8,"nodeType":"126","messageId":"127","endLine":7,"endColumn":12},{"ruleId":"124","severity":1,"message":"141","line":11,"column":8,"nodeType":"126","messageId":"127","endLine":11,"endColumn":13},{"ruleId":"124","severity":1,"message":"142","line":12,"column":8,"nodeType":"126","messageId":"127","endLine":12,"endColumn":20},{"ruleId":"124","severity":1,"message":"143","line":15,"column":7,"nodeType":"126","messageId":"127","endLine":15,"endColumn":16},{"ruleId":"124","severity":1,"message":"144","line":32,"column":20,"nodeType":"126","messageId":"127","endLine":32,"endColumn":29},{"ruleId":"124","severity":1,"message":"138","line":2,"column":8,"nodeType":"126","messageId":"127","endLine":2,"endColumn":13},{"ruleId":"124","severity":1,"message":"125","line":6,"column":8,"nodeType":"126","messageId":"127","endLine":6,"endColumn":18},{"ruleId":"124","severity":1,"message":"145","line":51,"column":10,"nodeType":"126","messageId":"127","endLine":51,"endColumn":12},{"ruleId":"146","severity":1,"message":"147","line":167,"column":60,"nodeType":"148","endLine":167,"endColumn":165},{"ruleId":"146","severity":1,"message":"147","line":178,"column":60,"nodeType":"148","endLine":178,"endColumn":163},{"ruleId":"146","severity":1,"message":"147","line":189,"column":60,"nodeType":"148","endLine":189,"endColumn":161},{"ruleId":"124","severity":1,"message":"149","line":33,"column":9,"nodeType":"126","messageId":"127","endLine":33,"endColumn":16},{"ruleId":"150","severity":1,"message":"151","line":14,"column":23,"nodeType":"126","messageId":"127","endLine":14,"endColumn":35},{"ruleId":"152","severity":1,"message":"153","line":74,"column":10,"nodeType":"154","endLine":74,"endColumn":18,"suggestions":"155"},{"ruleId":"156","severity":1,"message":"157","line":79,"column":70,"nodeType":"158","messageId":"159","endLine":79,"endColumn":72},{"ruleId":"152","severity":1,"message":"160","line":83,"column":10,"nodeType":"154","endLine":83,"endColumn":12,"suggestions":"161"},{"ruleId":"146","severity":1,"message":"147","line":109,"column":58,"nodeType":"148","endLine":109,"endColumn":140},"no-native-reassign",["162"],"no-negated-in-lhs",["163"],"@typescript-eslint/no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","'setLessons' is assigned a value but never used.","'useState' is defined but never used.","'Button' is defined but never used.","'Container' is defined but never used.","'ListItemText' is defined but never used.","'ListItem' is defined but never used.","'List' is defined but never used.","'Divider' is defined but never used.","'handleClickOpen' is assigned a value but never used.","'useEffect' is defined but never used.","'axios' is defined but never used.","'useMediaQuery' is defined but never used.","'Grid' is defined but never used.","'Image' is defined but never used.","'TextTruncate' is defined but never used.","'useStyles' is assigned a value but never used.","'setCourse' is assigned a value but never used.","'id' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'matches' is assigned a value but never used.","no-unused-vars","'setMaxImgNum' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'imagesPreview', 'imgCount', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["164"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'imagesPreview'. Either include it or remove the dependency array.",["165"],"no-global-assign","no-unsafe-negation",{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},"Update the dependencies array to be: [images, imagesPreview, imgCount, props]",{"range":"170","text":"171"},"Update the dependencies array to be: [imagesPreview]",{"range":"172","text":"173"},[2304,2312],"[images, imagesPreview, imgCount, props]",[2534,2536],"[imagesPreview]"]